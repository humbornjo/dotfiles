# espanso match file

# For a complete introduction, visit the official docs at: https://espanso.org/docs/

# You can use this file to define the base matches (aka snippets)
# that will be available in every application when using espanso.

# Matches are substitution rules: when you type the "trigger" string
# it gets replaced by the "replace" string.
matches:
  # Simple text replacement
  - trigger: ":daplaunch"
    replace: |
      {
        // See https://go.microsoft.com/fwlink/?linkid=830387
        "version": "0.2.0",
        "configurations": [
          // -------------------------
          // Python (via debugpy)
          // -------------------------
          {
            "name": "Python: Launch File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            // "pythonPath": ".venv/bin/python", // Optional: explicitly specify Python path
            // "env": { "ENV_VAR": "value" },
            // "args": ["arg1", "arg2"], // Optional: pass arguments to your script
            // "justMyCode": true // Optional: debug only user code
          },

          // -------------------------
          // Node.js (JavaScript/TypeScript)
          // -------------------------
          {
            "name": "Node.js: Launch Program",
            "type": "node",
            "request": "launch",
            "program": "${file}",
            "cwd": "${workspaceFolder}",
            "console": "integratedTerminal",
            // "runtimeExecutable": "node", // Optional: override runtime
            // "args": ["arg1", "arg2"]
          },

          // -------------------------
          // Go (via Delve)
          // -------------------------
          {
            "name": "Go: Launch Package",
            "type": "go",
            "request": "launch",
            "mode": "auto", // or "debug", "test"
            "program": "${fileDirname}",
            // "args": [],
            // "env": {}
          },

          // -------------------------
          // C / C++ (via cppdbg)
          // -------------------------
          {
            "name": "C/C++: Launch Executable",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/a.out", // or compiled binary path
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "lldb", // or "gdb" depending on platform and preference
            // "miDebuggerPath": "/usr/bin/lldb" // optional, if custom debugger needed
          },

          // -------------------------
          // Rust (via CodeLLDB or rust-analyzer)
          // -------------------------
          {
            "name": "Rust: Launch Binary",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/target/debug/${workspaceFolderBasename}", // built binary
            "args": [],
            "cwd": "${workspaceFolder}",
            "stopOnEntry": false,
            // "sourceLanguages": ["rust"]
          }
        ]
      }

  # NOTE: espanso uses YAML to define matches, so pay attention to the indentation!

  # But matches can also be dynamic:

  # Print the current date
  - trigger: ":date"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%Y/%m/%d"

  # Print the output of a shell command
  - trigger: ":shell"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "echo 'Hello from your shell'"

  # feel free to rate the world, lid.
  - regex: :st(?P<fstars>\d+),(?P<estars>\d+)
    replace: "{{stars}}"
    vars:
      - name: stars
        type: script
        params:
          args:
            - bash
            - -c
            - seq 1 {{fstars}} | xargs -I {} printf '★' | xargs -I {} echo '{}'`seq 1 {{estars}} |xargs -I {} printf '☆'`
